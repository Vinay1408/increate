/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    timestamp<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Timestamp";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    timestamp<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserLoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  UserRegisterInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
  NotificationType: "COMMENT" | "FOLLOW" | "LIKE" | "MODERATION" | "NEWCHAPTER" | "UPDATE"
  TagName: "ACTION" | "ADVENTURE" | "CRIME"
  UserRole: "CREATOR" | "READER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSON: any
  Timestamp: any
}

export interface NexusGenObjects {
  Chapter: { // root type
    chapterNumber: number; // Int!
    coverImageUrl: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    page?: Array<NexusGenRootTypes['Page'] | null> | null; // [Page]
    readingHistory?: Array<NexusGenRootTypes['ReadingHistory'] | null> | null; // [ReadingHistory]
    title: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    volume?: NexusGenRootTypes['Volume'] | null; // Volume
    volumeId: string; // String!
  }
  Comment: { // root type
    commentText: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Favourite: { // root type
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    seires: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Mutation: {};
  Notification: { // root type
    contentId: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    isRead: boolean; // Boolean!
    notificationType: NexusGenEnums['NotificationType']; // NotificationType!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Page: { // root type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
    chapterId: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    imageUrl: string; // String!
    pageNumber: number; // Int!
    readingHistory: Array<NexusGenRootTypes['ReadingHistory'] | null>; // [ReadingHistory]!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
  }
  Query: {};
  ReadingHistory: { // root type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
    chapterId: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    page: NexusGenRootTypes['Page']; // Page!
    pageId: string; // String!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
    volume: NexusGenRootTypes['Volume']; // Volume!
  }
  Series: { // root type
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    comments?: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    description?: string | null; // String
    favourites?: Array<NexusGenRootTypes['Favourite'] | null> | null; // [Favourite]
    id: string; // ID!
    subscriptions?: Array<NexusGenRootTypes['Subscription'] | null> | null; // [Subscription]
    tags?: Array<NexusGenRootTypes['Tag'] | null> | null; // [Tag]
    thumbnailUrl?: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    volumes?: Array<NexusGenRootTypes['Volume'] | null> | null; // [Volume]
  }
  Subscription: { // root type
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Tag: { // root type
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    tagName: NexusGenEnums['TagName']; // TagName!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
  }
  User: { // root type
    bio?: string | null; // String
    comments?: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    createdSeries?: Array<NexusGenRootTypes['Series'] | null> | null; // [Series]
    email: string; // String!
    favouriteSeries?: Array<NexusGenRootTypes['Favourite'] | null> | null; // [Favourite]
    id: string; // ID!
    name: string; // String!
    notifications?: Array<NexusGenRootTypes['Notification'] | null> | null; // [Notification]
    password: string; // String!
    profilePicture?: string | null; // String
    readingHistory?: Array<NexusGenRootTypes['ReadingHistory'] | null> | null; // [ReadingHistory]
    role: NexusGenEnums['UserRole']; // UserRole!
    subscriptions?: Array<NexusGenRootTypes['Subscription'] | null> | null; // [Subscription]
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
  }
  Volume: { // root type
    chapter?: Array<NexusGenRootTypes['Chapter'] | null> | null; // [Chapter]
    coverImageUrl: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    readingHistory?: Array<NexusGenRootTypes['ReadingHistory'] | null> | null; // [ReadingHistory]
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    volumeNumber: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Chapter: { // field return type
    chapterNumber: number; // Int!
    coverImageUrl: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    page: Array<NexusGenRootTypes['Page'] | null> | null; // [Page]
    readingHistory: Array<NexusGenRootTypes['ReadingHistory'] | null> | null; // [ReadingHistory]
    title: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    volume: NexusGenRootTypes['Volume'] | null; // Volume
    volumeId: string; // String!
  }
  Comment: { // field return type
    commentText: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Favourite: { // field return type
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    seires: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['User'] | null; // User
    register: NexusGenRootTypes['User'] | null; // User
  }
  Notification: { // field return type
    contentId: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    isRead: boolean; // Boolean!
    notificationType: NexusGenEnums['NotificationType']; // NotificationType!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Page: { // field return type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
    chapterId: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    imageUrl: string; // String!
    pageNumber: number; // Int!
    readingHistory: Array<NexusGenRootTypes['ReadingHistory'] | null>; // [ReadingHistory]!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
  }
  Query: { // field return type
    getUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  ReadingHistory: { // field return type
    chapter: NexusGenRootTypes['Chapter']; // Chapter!
    chapterId: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    page: NexusGenRootTypes['Page']; // Page!
    pageId: string; // String!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
    volume: NexusGenRootTypes['Volume']; // Volume!
  }
  Series: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    description: string | null; // String
    favourites: Array<NexusGenRootTypes['Favourite'] | null> | null; // [Favourite]
    id: string; // ID!
    subscriptions: Array<NexusGenRootTypes['Subscription'] | null> | null; // [Subscription]
    tags: Array<NexusGenRootTypes['Tag'] | null> | null; // [Tag]
    thumbnailUrl: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    volumes: Array<NexusGenRootTypes['Volume'] | null> | null; // [Volume]
  }
  Subscription: { // field return type
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Tag: { // field return type
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    tagName: NexusGenEnums['TagName']; // TagName!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
  }
  User: { // field return type
    bio: string | null; // String
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    createdSeries: Array<NexusGenRootTypes['Series'] | null> | null; // [Series]
    email: string; // String!
    favouriteSeries: Array<NexusGenRootTypes['Favourite'] | null> | null; // [Favourite]
    id: string; // ID!
    name: string; // String!
    notifications: Array<NexusGenRootTypes['Notification'] | null> | null; // [Notification]
    password: string; // String!
    profilePicture: string | null; // String
    readingHistory: Array<NexusGenRootTypes['ReadingHistory'] | null> | null; // [ReadingHistory]
    role: NexusGenEnums['UserRole']; // UserRole!
    subscriptions: Array<NexusGenRootTypes['Subscription'] | null> | null; // [Subscription]
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
  }
  Volume: { // field return type
    chapter: Array<NexusGenRootTypes['Chapter'] | null> | null; // [Chapter]
    coverImageUrl: string; // String!
    createdAt: NexusGenScalars['Timestamp']; // Timestamp!
    id: string; // ID!
    readingHistory: Array<NexusGenRootTypes['ReadingHistory'] | null> | null; // [ReadingHistory]
    series: NexusGenRootTypes['Series']; // Series!
    seriesId: string; // String!
    updatedAt: NexusGenScalars['Timestamp']; // Timestamp!
    volumeNumber: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Chapter: { // field return type name
    chapterNumber: 'Int'
    coverImageUrl: 'String'
    createdAt: 'Timestamp'
    id: 'ID'
    page: 'Page'
    readingHistory: 'ReadingHistory'
    title: 'String'
    updatedAt: 'Timestamp'
    volume: 'Volume'
    volumeId: 'String'
  }
  Comment: { // field return type name
    commentText: 'String'
    createdAt: 'Timestamp'
    id: 'ID'
    series: 'Series'
    seriesId: 'String'
    updatedAt: 'Timestamp'
    user: 'User'
    userId: 'String'
  }
  Favourite: { // field return type name
    createdAt: 'Timestamp'
    id: 'ID'
    seires: 'Series'
    seriesId: 'String'
    updatedAt: 'Timestamp'
    user: 'User'
    userId: 'String'
  }
  Mutation: { // field return type name
    login: 'User'
    register: 'User'
  }
  Notification: { // field return type name
    contentId: 'String'
    createdAt: 'Timestamp'
    id: 'ID'
    isRead: 'Boolean'
    notificationType: 'NotificationType'
    updatedAt: 'Timestamp'
    user: 'User'
    userId: 'String'
  }
  Page: { // field return type name
    chapter: 'Chapter'
    chapterId: 'String'
    createdAt: 'Timestamp'
    id: 'ID'
    imageUrl: 'String'
    pageNumber: 'Int'
    readingHistory: 'ReadingHistory'
    updatedAt: 'Timestamp'
  }
  Query: { // field return type name
    getUsers: 'User'
  }
  ReadingHistory: { // field return type name
    chapter: 'Chapter'
    chapterId: 'String'
    createdAt: 'Timestamp'
    id: 'ID'
    page: 'Page'
    pageId: 'String'
    seriesId: 'String'
    updatedAt: 'Timestamp'
    user: 'User'
    userId: 'String'
    volume: 'Volume'
  }
  Series: { // field return type name
    author: 'User'
    authorId: 'String'
    comments: 'Comment'
    createdAt: 'Timestamp'
    description: 'String'
    favourites: 'Favourite'
    id: 'ID'
    subscriptions: 'Subscription'
    tags: 'Tag'
    thumbnailUrl: 'String'
    title: 'String'
    updatedAt: 'Timestamp'
    volumes: 'Volume'
  }
  Subscription: { // field return type name
    createdAt: 'Timestamp'
    id: 'ID'
    series: 'Series'
    seriesId: 'String'
    updatedAt: 'Timestamp'
    user: 'User'
    userId: 'String'
  }
  Tag: { // field return type name
    createdAt: 'Timestamp'
    id: 'ID'
    series: 'Series'
    seriesId: 'String'
    tagName: 'TagName'
    updatedAt: 'Timestamp'
  }
  User: { // field return type name
    bio: 'String'
    comments: 'Comment'
    createdAt: 'Timestamp'
    createdSeries: 'Series'
    email: 'String'
    favouriteSeries: 'Favourite'
    id: 'ID'
    name: 'String'
    notifications: 'Notification'
    password: 'String'
    profilePicture: 'String'
    readingHistory: 'ReadingHistory'
    role: 'UserRole'
    subscriptions: 'Subscription'
    updatedAt: 'Timestamp'
  }
  Volume: { // field return type name
    chapter: 'Chapter'
    coverImageUrl: 'String'
    createdAt: 'Timestamp'
    id: 'ID'
    readingHistory: 'ReadingHistory'
    series: 'Series'
    seriesId: 'String'
    updatedAt: 'Timestamp'
    volumeNumber: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      user: NexusGenInputs['UserLoginInput']; // UserLoginInput!
    }
    register: { // args
      user: NexusGenInputs['UserRegisterInput']; // UserRegisterInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}