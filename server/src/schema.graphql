### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Chapter {
  chapterNumber: Int!
  coverImageUrl: String!
  createdAt: Timestamp!
  id: ID!
  page: [Page]
  readingHistory: [ReadingHistory]
  title: String!
  updatedAt: Timestamp!
  volume: Volume
  volumeId: String!
}

type Comment {
  commentText: String!
  createdAt: Timestamp!
  id: ID!
  series: Series!
  seriesId: String!
  updatedAt: Timestamp!
  user: User!
  userId: String!
}

scalar DateTime

type Favourite {
  createdAt: Timestamp!
  id: ID!
  seires: Series!
  seriesId: String!
  updatedAt: Timestamp!
  user: User!
  userId: String!
}

scalar JSON

type Mutation {
  register(user: UserRegisterInput!): User
}

type Notification {
  contentId: String!
  createdAt: Timestamp!
  id: ID!
  isRead: Boolean!
  notificationType: NotificationType!
  updatedAt: Timestamp!
  user: User!
  userId: String!
}

enum NotificationType {
  COMMENT
  FOLLOW
  LIKE
  MODERATION
  NEWCHAPTER
  UPDATE
}

type Page {
  chapter: Chapter!
  chapterId: String!
  createdAt: Timestamp!
  id: ID!
  imageUrl: String!
  pageNumber: Int!
  readingHistory: [ReadingHistory]!
  updatedAt: Timestamp!
}

type Query {
  ok: Boolean!
}

type ReadingHistory {
  chapter: Chapter!
  chapterId: String!
  createdAt: Timestamp!
  id: ID!
  page: Page!
  pageId: String!
  seriesId: String!
  updatedAt: Timestamp!
  user: User!
  userId: String!
  volume: Volume!
}

type Series {
  author: User!
  authorId: String!
  comments: [Comment]
  createdAt: Timestamp!
  description: String
  favourites: [Favourite]
  id: ID!
  subscriptions: [Subscription]
  tags: [Tag]
  thumbnailUrl: String
  title: String!
  updatedAt: Timestamp!
  volumes: [Volume]
}

type Subscription {
  createdAt: Timestamp!
  id: ID!
  series: Series!
  seriesId: String!
  updatedAt: Timestamp!
  user: User!
  userId: String!
}

type Tag {
  createdAt: Timestamp!
  id: ID!
  series: Series!
  seriesId: String!
  tagName: TagName!
  updatedAt: Timestamp!
}

enum TagName {
  ACTION
  ADVENTURE
  CRIME
}

scalar Timestamp

type User {
  bio: String
  comments: [Comment]
  createdAt: Timestamp!
  createdSeries: [Series]
  email: String!
  favouriteSeries: [Favourite]
  id: ID!
  name: String!
  notifications: [Notification]
  password: String!
  profilePicture: String
  readingHistory: [ReadingHistory]
  role: UserRole!
  subscriptions: [Subscription]
  updatedAt: Timestamp!
}

input UserRegisterInput {
  email: String!
  name: String!
  password: String!
}

enum UserRole {
  CREATOR
  READER
}

type Volume {
  chapter: [Chapter]
  coverImageUrl: String!
  createdAt: Timestamp!
  id: ID!
  readingHistory: [ReadingHistory]
  series: Series!
  seriesId: String!
  updatedAt: Timestamp!
  volumeNumber: Int!
}
